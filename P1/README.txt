This repository documents the workflow and codes for Project 1.
The files are described in order of use, following the progression of the project.

IMPORTANT: data2.txt and data4.txt are not in the GitHub repository as it doesn't admit heavy files. However, they are created when running problem7.cpp and problem9.cpp

- Step 1: Generating the exact solution

* problem2.cpp
C++ program that computes discrete values of 𝑥 and 𝑢(𝑥)
The results are written to the file data.txt.

* data.txt
Contains two columns with the discrete values of 𝑥 and 𝑢(𝑥) generated by problem2.cpp.

* plot.py
Python script that plots 𝑢(𝑥) vs. 𝑥 using the data from data.txt.

* plot.pdf
Output figure showing 𝑢(𝑥) vs. 𝑥 generated by plot.py.

- Step 2: General algorithm implementation

* problem7.cpp
C++ program that applies the general algorithm from Problem 6(a) for discretization sizes ranging from 𝑛=10 up to 𝑛=10^6.
The program writes the approximate values 𝑣 to data2.txt.
It also measures execution time for each case of 𝑛 and writes the timing data to timing_general.txt.

* data2.txt
Contains the values of 𝑥 and the corresponding approximations 𝑣 for 𝑛=10 up to 𝑛=10^6.
Data are stored in 12 columns.

* timing_general.txt
Contains execution time data for the general algorithm for each discretization case.

* plot2.py
Python script that reads data2.txt and generates plots of 𝑢(𝑥) vs. 𝑥 for the approximate solutions.

* plot2.pdf
Output figure of 𝑢(𝑥) vs. 𝑥 generated by plot2.py.

- Step 3: Error analysis

* problem8.cpp
C++ program that computes the logarithm of the absolute error and the logarithm of the relative error between 𝑣 and the exact 𝑢(𝑥).
Reads the approximations from data2.txt and outputs: data3_abs.txt, data3_rel.txt and data3_error.txt (maximum relative error for each case of n, using the helper function in safe_max.cpp).

* data3_abs.txt
Contains two columns: 𝑥 and log of the absolute error.
Results for n=10 up to n=10^6 are stored consecutively.

* data3_rel.txt
Contains two columns: 𝑥 log of the relative error.
Results for n=10 up to n=10^6 are stored consecutively.

* data3_error.txt
Contains the maximum relative error for each discretization case from n=10 to n=10^6.

* plot3.py
Python script that reads data3_abs.txt and data3_rel.txt and generates plots of log absolute error vs. x and log relative error vs. x for cases up to n=10^4.

* plot3_abs.pdf
Output figure of log absolute error vs. x.

* plot3_rel.pdf
Output figure of log relative error vs. x.

* plot3_rel_10000.pdf
Output figure of log relative error vs. x for the specific case n=10^4.

* safe_max.cpp
Utility function that returns the maximum value of a vector while ignoring NaN and Inf.

- Step 4: Special algorithm implementation

* problem9.cpp
C++ program that applies the special algorithm from Problem 9(a) for discretizations n=10 to n=10^6.
The approximate values v are written to data4.txt.
Execution times are recorded for each case of n in timing_special.txt.

* data4.txt
Contains the values of x and v for discretizations n=10 to n=10^6 (special algorithm).

* timing_special.txt
Contains execution time data for the special algorithm.

* plot4.py
Python script that reads both timing_general.txt and timing_special.txt and generates comparative plots of execution time.

* plot4_timing.pdf
Output figure showing execution time vs. log(n) for the general and special algorithms.